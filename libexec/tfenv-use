#!/usr/bin/env bash

function error_and_die() {
  echo -e "tfenv: ${0}: ${1}" >&2
  exit 1
}

function info() {
  echo -e "\033[0;32m[INFO] ${1}\033[0;39m"
}

[ -n "${TFENV_DEBUG}" ] && set -x

[ ${#} -ne 1 ] && error_and_die "usage: tfenv use <version>"

declare version_requested version regex

version_requested="${1}"

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}"
  regex="${version_requested##*\:}"
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}"
  regex=""
else
  version="${version_requested}"
  regex="^${version_requested}$"
fi

[ -d "${TFENV_ROOT}/versions" ] \
  || error_and_die "No versions of terraform installed. Please install one with: tfenv install"

version="$(\ls "${TFENV_ROOT}/versions" \
  | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
  | grep -e "${regex}" \
  | head -n 1
)"

[ -n "${version}" ] || error_and_die "No installed versions of terraform matched '${1}'"

target_path=${TFENV_ROOT}/versions/${version}
[ -f ${target_path}/terraform ] \
  || error_and_die "Version directory for ${version} is present, but the terraform binary is not! Manual intervention required."
[ -x ${target_path}/terraform ] \
  || error_and_die "Version directory for ${version} is present, but the terraform binary is not executable! Manual intervention required. "

info "Switching to v${version}"
echo "${version}" > "${TFENV_ROOT}/version"
terraform --version 1>/dev/null || error_and_die "'terraform --version' failed. Something is seriously wrong"
info "Switching completed"
